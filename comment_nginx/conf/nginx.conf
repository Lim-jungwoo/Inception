server {
	server_name jseo.42.fr;

	listen 443 ssl;
	listen [::]:443 ssl;

	ssl_certificate		/etc/nginx/tls/jseo.42.fr.crt;
	ssl_certificate_key	/etc/nginx/tls/jseo.42.fr.key;
	ssl_protocols		TLSv1.2 TLSv1.3;

	root /var/www/wordpress;
	index index.php index.html;

	location ~ /grafana {
		proxy_pass http://grafana:3000;
	}

	location ~/grafana/api/live {
		# HTTP/1.1 버전에서 지원하는 프로토콜 전환 메커니즘을 사용한다.
		proxy_http_version 1.1;
		# hop-by-hop 헤더를 사용한다
		# Nginx가 클라이언트에서 WAS로 업그레이드 요청을 보내려면 Upgrade 및 Connection 헤더를 명시적으로 설정해야 한다.
		# $http_upgrade를 통해 client request header에서 Upgrade: websocket 정보를 읽어와서 Upgrade header를 넣어준다.
		proxy_set_header Upgrade $http_upgrade;
		# 패킷이 Upgrade될 패킷임을 서버가 알 수 있도록 Connection헤더를 Upgrade로 해준다.
		proxy_set_header Connection "Upgrade";
		# 받는 대상 서버를 설정한다.
		proxy_set_header Host $http_host;
		# proxy_pass는 패턴이 맞지 않는 요청은 프록시 서버로 전송하고, 프록시 서버에서의 응답이 클라이언트에게 전달된다.
		proxy_pass http://grafana:3000;
	}

	location ~ ^(/site|/static|/public) {
		proxy_pass http://site:4000;
	}

	location /adminer {
		# fastcgi directive가 아닌 공통 directive이다.
		# fastcgi에 보내기 전에 요청된 파일이 존재하는 지 미리 확인할 때 주로 사용된다.
		# try_files를 사용하면 $fastcgi_path_info가 clear된다.
		# $uri는 현재의 URI에 정규화가 적용된 것이다. URI가 새로 작성되거나 내부적으로 redirect되면 이 값도 바뀐다.
		try_files $uri $uri/ /adminer/index.php$args;
		location ~ \.php$ {
			# include는 주로 공통되고 공유되는 configuration file을 포함할 때 사용한다.
			# fastcgi_params, fastcgi.conf 파일에는 fastcgi가 실행될 때 필요한 공통 인자들이 선언되어 있다.
			# fastcgi_params에는 SCRIPT_FILENAME 인자가 없다는 것 빼고는, fastcgi.conf파일과 똑같다.
			include fastcgi_params;
			# fastcgi_pass directive는 request를 보내줄 백엔드 위치를 뜻한다.
			fastcgi_pass adminer:8000;
			# fastcgi_param directive는 인자에 값을 세팅할 때 사용한다.
			# fastcgi 인자에 request마다 특정한 값을 설정하기 위해서 접속사로 많이 사용한다.
			# $document_root는 root나 alias directive로 설정된 현재 document의 root 값을 가지고 있다. 
			# $fastcgi_script_name은 실행할 script 파일이다. request의 마지막이 /로 끝나면 끝부분에
			# fastcgi_index directive의 값이 붙는다.
			# fastcgi_split_path_info가 사용되면, fastcgi_split_path_info의 첫 번째 그룹이 $fastcgi_script_name이다.
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		}
	}

	location / {
		try_files $uri $uri/ =404;
		location ~ \.php$ {
			include fastcgi_params;
			# fastcgi_split_path_info directive는 2개의 그룹을 정규표현식으로 정의한다.
			# 첫 번째 그룹은 $fastcgi_script_name 변수의 값으로 사용되고,
			# 두 번째 그룹은 $fastcgi_path_info 변수의 값으로 사용된다.
			# 어떤 부분을 실행하고, 어떤 부분을 script로 넘겨줄 지 request를 적절히 parsing할 때 사용된다.
			# 정규표현식에서 ^는 시작기호, $는 끝기호이다.
			# .은 모든 문자를 의미하고, \는 뒤의 특수문자를 문자로 인식하도록 해준다.
			# +는 +앞의 요소가 1회 이상 있어야 하는 것을 의미한다.
			# 즉, 여기서는 첫 번째 그룹은 어떤 문자든 1개 이상 있고, 뒤에 .php가 있는 것이고,
			# 두 번째 그룹은 /와 어떤 값이든 1회 이상 있고, 그것으로 끝나야 한다.
			fastcgi_split_path_info ^(.+\.php)(/.+)$;
			fastcgi_pass wordpress:9000;
			# fasgcgi_index는 $fastcgi_script_name 뒤에 붙을 index file을 정의한다.
			# SCRIPT_FILENAME 인자가 $document_root$fastcgi_script_name으로 설정되어 있을 때 사용된다.
			# ex. $fastcgi_script_name이 /test/test1/이면, /test/test1/index.php가 된다.
			fastcgi_index index.php;
			# SCRIPT_FILENAME은 실행할 script가 실제로 저장되어있는 위치를 가리킨다.
			# SCRIPT_FILENAME은 SCRIPT_NAME과 관계가 있기 때문에 $document_root$fastcgi_script_name으로 자주 사용한다.
			# $request_filename을 사용하는 것도 많은 이점이 있다.
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			# SCRIPT_NAME은 실행할 script의 이름을 가리킨다. 필요에 따라서 다양한 방법으로 설정할 수 있는 매우 중요한 parameter이다.
			# request URI인 $fastcgi_script_name으로 종종 설정되며 request URI의 끝부분이 /이면 fastcgi_index나 fastcgi_fix_path_info의 첫 번째 그룹이 붙는다.
			fastcgi_param SCRIPT_NAME $fastcgi_script_name;
			# fastcgi_intercept_errors directive는 fastcgi에서 에러가 발생했을 때 nginx가 처리하도록 하거나,
			# client에게 그대로 보내줄 지를 정의한다.
		}
	}
}